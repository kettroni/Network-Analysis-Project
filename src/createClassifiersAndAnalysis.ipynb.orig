{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import random\n",
    "import csv\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "import pickle\n",
    "import sys\n",
    "from utils import utils\n",
    "import numpy as np\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "import math\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn import svm\n",
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Different classifiers\n",
    "def random_forest_clf(X, y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
    "    clf = RandomForestClassifier()\n",
    "    clf.fit(X_train, y_train)\n",
    "    # print(clf.fit(X_train, y_train).summary())\n",
    "    y_pred = clf.predict(X_test)\n",
    "    fpr,tpr,ths = roc_curve(y_test, y_pred)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    return [clf,acc,\"Random Forest Classifier\",fpr,tpr,ths]\n",
    "\n",
    "def knn_clf(X, y, neighs):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
    "    clf = KNeighborsClassifier(n_neighbors = neighs)\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    return [clf,acc,\"K-Nearest Neighbors\"]\n",
    "\n",
    "def svm_clf(X,y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
    "    clf = svm.SVC(kernel='rbf')\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    return [clf,acc,\"Support Vector Machine\"]\n",
    "\n",
    "def logreg_clf(X,y):\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)\n",
    "    clf = LogisticRegression()\n",
    "    clf.fit(X_train, y_train)\n",
    "    y_pred = clf.predict(X_test)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    return [clf,acc,\"Logistic Regression\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load X and y data\n",
    "X = []\n",
    "with open('../data/X_data.pkl', 'rb') as f:\n",
    "    X = pickle.load(f)\n",
    "y = []\n",
    "with open('../data/Y_data.pkl', 'rb') as f:\n",
    "    y = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "classifiers = []\n",
    "\n",
    "classifiers.append(random_forest_clf(X,y))\n",
    "classifiers.append(knn_clf(X,y,int(math.sqrt(len(X)))))\n",
    "# Take 10k samples of Y=1 and 10k samples of Y=0 for SVM\n",
    "idxs = list(random.sample(range(120000), 10000)) + list(random.sample(range(120000,len(X)), 10000))\n",
    "classifiers.append(svm_clf([X[i] for i in idxs],[y[i] for i in idxs]))\n",
    "classifiers.append(logreg_clf(X,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "<<<<<<< LOCAL CELL DELETED >>>>>>>\n",
    "# All of the classifiers appended in a list\n",
    "classifiers = []\n",
    "\n",
    "classifiers.append(random_forest_clf(X,y))\n",
    "classifiers.append(knn_clf(X,y,int(math.sqrt(len(X)))))\n",
    "classifiers.append(nb_clf(X,y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "rm_edges = []\n",
    "with open('../data/removedEdgesList.pkl', 'rb') as f:\n",
    "    rm_edges = pickle.load(f)\n",
    "\n",
    "# Load original network\n",
    "G = nx.read_edgelist('../data/decoded.tsv', delimiter = '\\t', create_using=nx.DiGraph())\n",
    "\n",
    "# Load smaller network\n",
    "S = nx.read_edgelist('../data/reduced_network.tsv', delimiter = '\\t', create_using=nx.DiGraph())\n",
    "\n",
    "utils.HITS(S, '../data/reduced_hits.pkl')\n",
    "utils.PR_file(S, '../data/reduced_pr.pkl')\n",
    "\n",
    "# Load smaller PageRank data\n",
    "pr = []\n",
    "with open('../data/reduced_pr.pkl', 'rb') as f:\n",
    "    pr = pickle.load(f)\n",
    "\n",
    "# Load smaller HITS data\n",
    "hits = []\n",
    "with open('../data/reduced_hits.pkl', 'rb') as f:\n",
    "    hits = pickle.load(f)\n",
    "\n",
    "# Load smaller category data\n",
    "cat_dict = []\n",
    "with open('../data/getCategoryFromLinkDict.pkl', 'rb') as f:\n",
    "    cat_dict = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.9553727832368496, 0.6107172052518309, 0.571595402145443, 0.48396756810864017]\n"
     ]
    }
   ],
   "source": [
    "vecs = []\n",
    "scores = []\n",
    "for e in G.edges():\n",
    "    u, v = e\n",
    "    # Create X data according to smaller data network\n",
    "    a = list(utils.create_X(S,u,v, cat_dict,pr,hits))\n",
    "    vec = np.array(a)\n",
    "    vecs.append(vec)\n",
    "\n",
    "for i in range(len(classifiers)):\n",
    "    # Predictions \n",
    "    y_pred = classifiers[i][0].predict(vecs)\n",
    "    score = accuracy_score(np.ones(len(G.edges)), y_pred)\n",
    "    scores.append(score)\n",
    "# Print accuracy scores of classifiers\n",
    "print(scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "For Random Forest Classifier\n",
      "Variable: hits_y               Importance: 0.26\n",
      "Variable: pr_y                 Importance: 0.22\n",
      "Variable: aa                   Importance: 0.21\n",
      "Variable: jd                   Importance: 0.16\n",
      "Variable: hits_x               Importance: 0.07\n",
      "Variable: no_comm              Importance: 0.04\n",
      "Variable: pr_x                 Importance: 0.04\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate feature importances and plot them\n",
    "\n",
    "for i in range(1):\n",
    "    print(\"For\", classifiers[i][2])\n",
    "    feature_importances = list(classifiers[i][0].feature_importances_)\n",
    "    feature_list = list([\"no_comm\", \"jd\", \"aa\", \"pr_x\", \"pr_y\", \"hits_x\", \"hits_y\"])\n",
    "    f_importances = [(feature, round(feature_importance, 2)) for feature, feature_importance in zip(feature_list, feature_importances)]\n",
    "    # Sort the feature importances by most important first\n",
    "    f_importances = sorted(f_importances, key = lambda x: x[1], reverse = True)\n",
    "    # Print out the feature and importances \n",
    "    [print('Variable: {:20} Importance: {}'.format(*pair)) for pair in f_importances]\n",
    "    print('\\n')\n",
    "    lab = ['HITS for target', 'Page Rank for target', 'Adamic/Adar Index', 'Jaccard Distance',\n",
    "           'HITS for source', 'Number of common categories', 'Page rank for source']\n",
    "    imp = []\n",
    "    for f in f_importances:\n",
    "        imp.append(f[1])\n",
    "    plt.bar(lab,imp)\n",
    "    plt.ylabel('Importance')\n",
    "    plt.xticks(lab, rotation='vertical')\n",
    "    plt.title('Feature importances for Random Forest Classifier')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# ROC curve for Random Forest\n",
    "fpr,tpr,ths = classifiers[0][3:6]\n",
    "auc_sc = auc(fpr, tpr)\n",
    "plt.plot(fpr, tpr, label='ROC curve (area = %0.2f)' % auc_sc)\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC with test data')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1872x576 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,len(classifiers), figsize=(26, 8))\n",
    "fig.subplots_adjust(hspace=0.5)\n",
    "i=0\n",
    "labels =['Test Set', 'Removed edges classification']\n",
    "\n",
    "for clf in classifiers:\n",
    "    \n",
    "    x = np.arange(len(labels))  # the label locations\n",
    "    width = 0.70  # the width of the bars\n",
    "\n",
    "    bars = ax[i].bar(x, [clf[1],scores[i]], width)\n",
    "\n",
    "    ax[i].set_ylabel('Score')\n",
    "    ax[i].set_ylim([0,1])\n",
    "    ax[i].set_title('Accuracy scores for ' + str(clf[2]))\n",
    "    ax[i].set_xticks(x)\n",
    "    ax[i].set_xticklabels(labels)\n",
    "    i = i+1\n",
    "    \n",
    "plt.draw()\n",
    "plt.savefig('../pictures/accuracyGraph.png')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
